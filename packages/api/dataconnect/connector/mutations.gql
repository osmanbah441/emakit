mutation createNewCategory(
    $name: String! 
    $description: String!
    $parentCategory: UUID
    $imageUrl: String! 
 ) @auth(level: NO_ACCESS) {
    category_insert(data:  {
        name: $name
        description: $description
        parentCategoryId: $parentCategory
        imageUrl: $imageUrl
    
    })
}

mutation setCategoryAttributes(
    $id: UUID!
    $specificationAttributes: [String!]
    $variationAttributes: Any
 ) @auth(level: NO_ACCESS) {
    category_update(id: $id, data:  {
        specificationAttributes: $specificationAttributes
        variationAttributes: $variationAttributes
    })
}

mutation deleteCategory($id: UUID!) @auth(level: NO_ACCESS) {
    category_delete(id: $id)
}

mutation createNewProduct(
    $name: String! 
    $description: String!
    $category: UUID!
    $specs: Any!
    $storeId: UUID!,
    $attributes: Any!,
    $imageUrls: [String!]!,
    $price: Float!,
    $availableStock: Int!
    # $embeddingText: String!
 )@transaction @auth(level: USER, insecureReason: "Any user with store can create product") {
    product_insert(data:  {
        name: $name
        description: $description
        categoryId: $category
        specifications: $specs
        # embeddingText_embed:  {
        #     model: "gemini-embedding-001"
        #     text: $embeddingText
        # }
    })

    productVariation_insert(data: {
        productId_expr: "response.product_insert.id",
        storeId: $storeId,
        attributes: $attributes,
        imageUrls: $imageUrls,
        price: $price,
        availableStock: $availableStock
    }) 
}

mutation createNewproductVariation(
    $productId: UUID!,
    $storeId: UUID!,
    $attributes: Any!,
    $imageUrls: [String!]!,
    $price: Float!,
    $availableStock: Int!
 ) @auth(level: USER, insecureReason: "Any user with store can create product"){
    productVariation_insert(data:  {
        productId: $productId
        storeId: $storeId
        attributes: $attributes
        imageUrls: $imageUrls
        price: $price
        availableStock: $availableStock
    })
}

mutation createNewUser(
    $displayName: String
    $email: String
    $phoneNumber: String
    $photoUrl: String
) @transaction @auth(level: PUBLIC, insecureReason: "Everyone can create account") {
    user_insert(data:  {
        displayName: $displayName
        email: $email
        phoneNumber: $phoneNumber
        photoUrl: $photoUrl
    })
    
    cart_insert(data:  {
        userUid_expr: "response.user_insert.uid"
    })

}


mutation applyForStore(
    $name: String!
    $phoneNumber: String!
) @auth(level: USER, insecureReason: "Users can create stores") {
    store_insert(data: {
        name: $name
        ownerUid_expr: "auth.uid"
        phoneNumber: $phoneNumber
    })
}

mutation updateDisplayName(
    $displayName: String!
) @auth(level: USER, insecureReason: "Users can update their display name") {
    user_update(
        data: {
        displayName: $displayName
    }, key: {uid_expr: "auth.uid"})
}



mutation approveStore(
    $storeId: UUID!
) @auth(level: NO_ACCESS, insecureReason: "Admins can approve stores") {
    store_update(
        data: {status: "active"},
        key: {id: $storeId}
    )
}

mutation createCartItem(
  $productVariationId: UUID!
  $cartId: UUID!
) @auth(level: USER, insecureReason: "Users can create cart items")  {
  cartItem_insert(data: {
    cartId: $cartId
    productVariationId: $productVariationId
  })
}




